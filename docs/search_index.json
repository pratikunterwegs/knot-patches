[["index.html", "Residence patches for red knots Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 Data processing", " Residence patches for red knots Pratik R Gupte 2021-01-30 Section 1 Introduction This repository is the source for a project to idenify residence patches from high-resolution tracking data from individual red knots Calidris canutus islandica tracked using the WATLAS system. 1.1 Attribution Please contact the following before cloning or in case of interest in the project. Pratik Gupte (author and maintainer) PhD student, GELIFES – University of Groningen Guest researcher, COS – NIOZ p.r.gupte@rug.nl Nijenborgh 7/5172.0583 9747AG Groningen 1.2 Data access The data used in this work are not publicly available. Contact PI Allert Bijleveld (COS-NIOZ) for data access. 1.3 Data processing The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. "],["getting-data.html", "Section 2 Getting data 2.1 Prepare watlastools and other libraries 2.2 Read in tag deployment data 2.3 Get data and save locally", " Section 2 Getting data This section focusses on accessing and downloading WATLAS data. This is done using functions in the WATLAS Utilities package. Workflow Preparing required libraries. Reading tag data with deployment start dates from a local file. This file is not yet publicly available. Connecting to the NIOZ databse and downloading data. This database is also not public-access. 2.1 Prepare watlastools and other libraries # install the package watlastools from master branch using the following # install.packages(&quot;devtools&quot;) library(devtools) devtools::install_github(&quot;pratikunterwegs/watlastools&quot;) library(watlastools) # libraries to process data library(data.table) library(ggplot2) library(ggthemes) library(purrr) library(glue) 2.2 Read in tag deployment data # read deployment data from local file in data folder tag_info &lt;- fread(&quot;data/data2018/SelinDB.csv&quot;) # filter out NAs in release date and time tag_info &lt;- tag_info[!is.na(Release_Date) &amp; !is.na(Release_Time), ] # make release date column as POSIXct tag_info[, Release_Date := as.POSIXct(paste(Release_Date, Release_Time, sep = &quot; &quot; ), format = &quot;%d.%m.%y %H:%M&quot;, tz = &quot;CET&quot; )] # check new release date column head(tag_info$Release_Date) 2.3 Get data and save locally # read in database access parameters from a local file data_access &lt;- fread(&quot;data/access_params.txt&quot;) # create a data storage file if not present # use the getData function from watlastools on the tag_info data frame # this is placed inside a pmap wrapper to automate access for all birds if (!dir.exists(&quot;data/data2018&quot;)) { dir.create(&quot;data/data2018&quot;) } pmap(tag_info[, .(Toa_Tag, Release_Date)], function(Toa_Tag, Release_Date) { prelim_data &lt;- watlastools::wat_get_data( tag = Toa_Tag, tracking_time_start = as.character(Release_Date), tracking_time_end = &quot;2018-10-31&quot;, username = data_access$username, password = data_access$password ) setDT(prelim_data) # prelim_data[,TAG:= = as.numeric(TAG) - prefix_num] message(glue(&quot;tag {Toa_Tag} accessed with {nrow(prelim_data)} fixes&quot;)) fwrite(prelim_data, file = glue(&quot;data/data2018/{Toa_Tag}_data.csv&quot;), dateTimeAs = &quot;ISO&quot; ) }) "],["cleaning-data.html", "Section 3 Cleaning data 3.1 Prepare watlastools and other libraries 3.2 Prepare to remove attractor points 3.3 Read, clean, and write data 3.4 Tracking period for each id", " Section 3 Cleaning data This section is about cleaning downloaded data using the cleanData function in the WATLAS Utilities package. Workflow Prepare required libraries. Read in data, apply the cleaning function, and overwrite local data. 3.1 Prepare watlastools and other libraries # watlastools assumed installed from the previous step # if not, install from the github repo as shown below devtools::install_github(&quot;pratikunterwegs/watlastools&quot;) # libraries to process data library(data.table) library(glue) library(fasttime) library(stringr) library(watlastools) 3.2 Prepare to remove attractor points # read in identified attractor points atp &lt;- fread(&quot;data/attractor_points.txt&quot;) 3.3 Read, clean, and write data # make a list of data files to read data_files &lt;- list.files( path = &quot;data/data_2018/data_tracks/&quot;, pattern = &quot;whole_season*&quot;, full.names = TRUE ) data_ids &lt;- str_extract(data_files, &quot;(tx_\\\\d+)&quot;) %&gt;% str_sub(-3, -1) # read deployment data from local file in data folder tag_info &lt;- fread(&quot;data/data_2018/SelinDB.csv&quot;) # filter out NAs in release date and time tag_info &lt;- tag_info[!is.na(Release_Date) &amp; !is.na(Release_Time), ] # make release date column as POSIXct tag_info[, Release_Date := as.POSIXct(paste(Release_Date, Release_Time, sep = &quot; &quot; ), format = &quot;%d.%m.%y %H:%M&quot;, tz = &quot;CET&quot; )] # sub for knots in data data_files &lt;- data_files[as.integer(data_ids) %in% tag_info$Toa_Tag] # map read in, cleaning, and write out function over vector of filenames invisible( lapply(data_files, function(df) { # read in the data temp_data &lt;- fread(df, integer64 = &quot;numeric&quot;) # filter for release date + 24 hrs temp_id &lt;- str_sub(temp_data[1, TAG], -3, -1) rel_date &lt;- tag_info[Toa_Tag == temp_id, Release_Date] temp_data &lt;- temp_data[TIME / 1e3 &gt; as.numeric(rel_date + (24 * 3600)), ] # do a try catch so as not to break the process tryCatch( { temp_data &lt;- wat_rm_attractor( df = temp_data, atp_xmin = atp$xmin, atp_xmax = atp$xmax, atp_ymin = atp$ymin, atp_ymax = atp$ymax ) clean_data &lt;- wat_clean_data( data = temp_data, moving_window = 3, nbs_min = 3, sd_threshold = 100, filter_speed = TRUE, speed_cutoff = 150 ) agg_data &lt;- wat_agg_data( data = clean_data, interval = 30 ) message(glue(&quot;tag {unique(agg_data$id)} \\\\ cleaned with {nrow(agg_data)} fixes&quot;)) fwrite( x = agg_data, file = glue(&quot;data/data_2018/data_processed/whole_season_preproc_{temp_id}.csv&quot;), dateTimeAs = &quot;ISO&quot; ) rm(temp_data, clean_data, agg_data) }, error = function(e) { message(glue(&quot;tag {unique(temp_id)} failed&quot;)) } ) }) ) 3.4 Tracking period for each id data_files &lt;- list.files(&quot;data/data_2018/data_processed&quot;, full.names = TRUE ) total_tracking &lt;- lapply(data_files, function(x) { a &lt;- fread(x) a &lt;- a[c(1, nrow(a)), list(id, time)] a[, event := c(&quot;time_start&quot;, &quot;time_end&quot;)] }) # bind data tables total_tracking &lt;- rbindlist(total_tracking) # get tracking interval for each total_tracking &lt;- dcast(total_tracking, id ~ event, value.var = &quot;time&quot; ) # write to file fwrite(total_tracking, file = &quot;data/data_2018/data_2018_id_tracking_interval.csv&quot;) "],["adding-tidal-cycle-data.html", "Section 4 Adding tidal cycle data 4.1 Prepare libraries 4.2 Read water level data 4.3 Calculate high tides 4.4 Add time since high tide", " Section 4 Adding tidal cycle data This section is about adding tidal cycle data to individual trajectories. This is done to split the data up into convenient, and biologically sensible units. This section uses the package VulnToolkit (Troy D. Hill, Shimon C. Anisfeld 2014) to identify high tide times from water-level data provided by Rijkswaterstaat for the measuring point at West Terschelling. Workflow Prepare required libraries, Read in water level data and identify high tides, Write tidal cycle data to local file, Add time since high tide to movement data. 4.1 Prepare libraries # load VulnToolkit or install if not available if (&quot;VulnToolkit&quot; %in% installed.packages() == FALSE) { devtools::install_github(&quot;troyhill/VulnToolkit&quot;) } library(VulnToolkit) # libraries to process data library(data.table) library(purrr) library(glue) library(dplyr) library(stringr) library(fasttime) library(lubridate) library(watlastools) 4.2 Read water level data Water level data for West Terschelling, a settlement approx. 10km from the field site are provided by Rijkswaterstaat’s Waterinfo, in cm above Amsterdam Ordnance Datum. These data are manually downloaded in the range July 1, 2018 – October 31, 2018 and saved in data/data_2018. # read in waterlevel data waterlevel &lt;- fread(&quot;data/data_2018/waterlevelWestTerschelling.csv&quot;, sep = &quot;;&quot;) # select useful columns and rename waterlevel &lt;- waterlevel[, .(WAARNEMINGDATUM, WAARNEMINGTIJD, NUMERIEKEWAARDE)] setnames(waterlevel, c(&quot;date&quot;, &quot;time&quot;, &quot;level&quot;)) # make a single POSIXct column of datetime waterlevel[, dateTime := as.POSIXct(paste(date, time, sep = &quot; &quot;), format = &quot;%d-%m-%Y %H:%M:%S&quot;, tz = &quot;CET&quot; )] waterlevel &lt;- setDT(distinct(setDF(waterlevel), dateTime, .keep_all = TRUE)) 4.3 Calculate high tides A tidal period of 12 hours 25 minutes is taken from Rijkswaterstaat. # use the HL function from vulnToolkit to get high tides tides &lt;- VulnToolkit::HL(waterlevel$level, waterlevel$dateTime, period = 12.41, tides = &quot;H&quot;, semidiurnal = TRUE ) # read in release data and get first release - 24 hrs tag_info &lt;- fread(&quot;data/data_2018/SelinDB.csv&quot;) tag_info &lt;- tag_info[!is.na(Release_Date) &amp; !is.na(Release_Time), ] tag_info[, Release_Date := as.POSIXct(paste(Release_Date, Release_Time, sep = &quot; &quot; ), format = &quot;%d.%m.%y %H:%M&quot;, tz = &quot;CET&quot; )] # remove NAs tag_info &lt;- na.omit(tag_info, cols = &quot;Release_Date&quot;) first_release &lt;- min(tag_info$Release_Date, na.rm = TRUE) - (3600 * 24) # remove tides before first release tides &lt;- setDT(tides)[time &gt; first_release, ][, tide2 := NULL] tides[, tide_number := seq(nrow(tides))] # write to local file fwrite(tides, file = &quot;data/data_2018/tides_2018.csv&quot;, dateTimeAs = &quot;ISO&quot; ) 4.4 Add time since high tide # read in data and add time since high tide data_files &lt;- list.files( path = &quot;data/data_2018/data_processed/&quot;, pattern = &quot;whole_season_&quot;, full.names = TRUE ) data_ids &lt;- str_extract(data_files, &quot;(whole_season_preproc_\\\\d+)&quot;) %&gt;% str_sub(-3, -1) # map read in and tidal time calculation over data # merge data to insert high tides within movement data # arrange by time to position high tides correctly invisible( lapply(data_files, function(df) { # read and fix data types temp_data &lt;- fread(df, integer64 = &quot;numeric&quot;) temp_data[, ts := fastPOSIXct(ts, tz = &quot;CET&quot;)] # merge with tides and order on time temp_data &lt;- wat_add_tide( data = temp_data, tide_data = &quot;data/data_2018/tides_2018.csv&quot; ) # add waterlevel temp_data[, temp_time := lubridate::round_date(ts, unit = &quot;10 minute&quot;)] temp_data &lt;- merge(temp_data, waterlevel[, .(dateTime, level)], by.x = &quot;temp_time&quot;, by.y = &quot;dateTime&quot; ) setnames(temp_data, old = &quot;level&quot;, new = &quot;waterlevel&quot;) # export data, print msg, remove data fwrite(temp_data, file = df, dateTimeAs = &quot;ISO&quot;) message(glue(&quot;tag {unique(temp_data$id)} added time since high tide&quot;)) rm(temp_data) }) ) References "],["revisit-analysis.html", "Section 5 Revisit analysis 5.1 Prepare libraries 5.2 Read data, split, recurse, write", " Section 5 Revisit analysis This section is about splitting the data by tidal cycle, and passing the individual- and tidal cycle-specific data to revisit analysis, which is implemented using the package recurse. Workflow Prepare required libraries, Performing recurse: Read in movement data and split by tidal cycle, Perform revisit analysis using recurse, Write data with revisit metrics to file. 5.1 Prepare libraries This section uses the recurse package (Bracis, Bildstein, and Mueller 2018). # load recurse or install if not available if (&quot;recurse&quot; %in% installed.packages() == FALSE) { install.packages(&quot;recurse&quot;) } library(recurse) # libraries to process data library(data.table) library(purrr) library(glue) library(dplyr) library(fasttime) library(stringr) 5.2 Read data, split, recurse, write # read in data data_files &lt;- list.files( path = &quot;data/data_2018/data_processed/&quot;, pattern = &quot;whole_season_&quot;, full.names = TRUE ) data_ids &lt;- str_extract(data_files, &quot;(whole_season_preproc_\\\\d+)&quot;) %&gt;% str_sub(-3, -1) # read in release data and get first release - 24 hrs tag_info &lt;- fread(&quot;data/data_2018/SelinDB.csv&quot;) tag_info &lt;- tag_info[!is.na(Release_Date) &amp; !is.na(Release_Time), ] tag_info[, Release_Date := as.POSIXct(paste(Release_Date, Release_Time, sep = &quot; &quot; ), format = &quot;%d.%m.%y %H:%M&quot;, tz = &quot;CET&quot; )] # prepare recurse data folder if (!dir.exists(&quot;data/data_2018/data_pre_patch&quot;)) { dir.create(&quot;data/data_2018/data_pre_patch&quot;) } # prepare recurse in parameters # radius (m), cutoff (mins) radius &lt;- 50 timeunits &lt;- &quot;mins&quot; revisit_cutoff &lt;- 60 # walk read in, splitting, and recurse over individual level data # remove visits where the bird left for 60 mins, and then returned # this is regardless of whether after its return it stayed there # the removal counts the cumulative sum of all (timeSinceLastVisit &lt;= 60) # thus after the first 60 minute absence, all points are assigned TRUE # this must be grouped by the coordinate walk(data_files, function(df) { # read in, fix data type, and split temp_data &lt;- fread(df, integer64 = &quot;numeric&quot;) temp_data[, ts := fastPOSIXct(ts, tz = &quot;CET&quot;)] setDF(temp_data) temp_data &lt;- split(temp_data, temp_data$tide_number) # map over the tidal cycle level data walk(temp_data, function(tempdf) { tryCatch( { # perform the recursion analysis df_recurse &lt;- getRecursions( x = tempdf[, c(&quot;x&quot;, &quot;y&quot;, &quot;ts&quot;, &quot;id&quot;)], radius = radius, timeunits = timeunits, verbose = TRUE ) # extract revisit statistics and calculate residence time # and revisits with a 1 hour cutoff df_recurse &lt;- setDT(df_recurse[[&quot;revisitStats&quot;]]) df_recurse[, timeSinceLastVisit := ifelse(is.na(timeSinceLastVisit), -Inf, timeSinceLastVisit)] df_recurse[, longAbsenceCounter := cumsum(timeSinceLastVisit &gt; 60), by = .(coordIdx) ] df_recurse &lt;- df_recurse[longAbsenceCounter &lt; 1, ] df_recurse &lt;- df_recurse[, .( resTime = sum(timeInside), fpt = first(timeInside), revisits = max(visitIdx) ), by = .(coordIdx, x, y) ] # prepare and merge existing data with recursion data setDT(tempdf)[, coordIdx := 1:nrow(tempdf)] tempdf &lt;- merge(tempdf, df_recurse, by = c(&quot;x&quot;, &quot;y&quot;, &quot;coordIdx&quot;)) setorder(tempdf, ts) # write each data frame to file fwrite(tempdf, file = glue(&#39;data/data_2018/data_pre_patch/{unique(tempdf$id)}_\\\\ {str_pad(unique(tempdf$tide_number), width=3, pad=&quot;0&quot;)}_\\\\ revisit.csv&#39;) ) message(glue(&#39;recurse {unique(tempdf$id)}_\\\\ {str_pad(unique(tempdf$tide_number), \\\\ width=3, pad=&quot;0&quot;)} done&#39;)) rm(tempdf, df_recurse) }, error = function(e) { message(&quot;some recurses failed&quot;) } ) }) }) References "],["residence-patch-construction.html", "Section 6 Residence patch construction 6.1 Prepare libraries 6.2 Patch construction", " Section 6 Residence patch construction This section is about using the main watlastools functions to infer residence points when data is missing from a movement track, to classify points into residence or travelling, and to construct low-tide residence patches from the residence points. Summary statistics on these spatial outputs are then exported to file for further use. Workflow Prepare watlastools and required libraries, Read data, infer residence, classify points, construct patches, repair patches, and write movement data and patch summary to file. 6.1 Prepare libraries # load watlastools or install if not available if (!&quot;watlastools&quot; %in% installed.packages()) { devtools::install_github(&quot;pratikunterwegs/watlastools&quot;) } library(watlastools) # libraries to process data library(dplyr) library(data.table) library(purrr) library(stringr) library(glue) library(readr) library(fasttime) # functions for this stage alone ci &lt;- function(x) { qnorm(0.975) * sd(x, na.rm = T) / sqrt((length(x))) } 6.2 Patch construction if (file.exists(&quot;data/data_2018/data_2018_patch_summary.csv&quot;)) { file.remove(&quot;data/data_2018/data_2018_patch_summary.csv&quot;) } Process patches. Takes approx. 5 hours for 3 second data. # make a vector of data files to read data_files &lt;- list.files( path = &quot;data/data_2018/data_pre_patch&quot;, pattern = &quot;_revisit.csv&quot;, full.names = TRUE ) # get tag ids data_id &lt;- str_split(data_files, &quot;/&quot;) %&gt;% map_chr(function(l) l[[4]] %&gt;% str_sub(1, 3)) # make df of tag ids and files data &lt;- tibble(tag = data_id, data_file = data_files) data &lt;- split(x = data, f = data$tag) %&gt;% map(function(l) l$data_file) # map inferResidence, classifyPath, and getPatches over data walk(data, function(df_list) { patch_data &lt;- map(df_list, function(l) { # read the data file temp_data &lt;- fread(l) temp_data[, ts := fastPOSIXct(ts)] id &lt;- unique(temp_data$id) tide_number &lt;- unique(temp_data$tide_number) # wrap process in try catch tryCatch( { # watlastools function to infer residence temp_data &lt;- wat_infer_residence( data = temp_data, inf_patch_time_diff = 30, inf_patch_spat_diff = 100 ) # watlastools function to classify path temp_data &lt;- wat_classify_points( data = temp_data, lim_res_time = 2, min_fix_warning = 3 ) # watlastools function to get patches patch_dt &lt;- wat_make_res_patch( data = temp_data, buffer_radius = 10, lim_spat_indep = 100, lim_time_indep = 30, lim_rest_indep = 30, min_fixes = 3 ) # print message message(glue(&quot;patches {id}_{tide_number} done&quot;)) return(patch_dt) }, # null error function, with option to collect data on errors error = function(e) { message(glue::glue(&quot;patches {id}_{tide_number} errored&quot;)) } ) }) tryCatch( { # repair high tide patches across an individual&#39;s tidal cycles repaired_data &lt;- wat_repair_ht_patches(patch_data_list = patch_data) # write patch summary data if (all(is.data.frame(repaired_data), nrow(repaired_data) &gt; 0)) { # watlastools function to get patch data as summary patch_summary &lt;- wat_get_patch_summary( res_patch_data = repaired_data, which_data = &quot;summary&quot; ) fwrite(patch_summary, file = &quot;data/data_2018/data_2018_patch_summary.csv&quot;, append = TRUE ) # we also want the spatial object patch_spatial &lt;- wat_get_patch_summary( res_patch_data = repaired_data, which_data = &quot;spatial&quot; ) sf::st_crs(patch_spatial) &lt;- 32631 } sf::st_write(patch_spatial, dsn = &quot;data/data_2018/spatials/patches_2018.gpkg&quot;, append = TRUE ) }, error = function(e) { message(glue::glue(&quot;patch writing errored&quot;)) } ) }) "],["in-development-residence-patch-cleaning.html", "Section 7 In development: Residence patch cleaning 7.1 Prepare libraries 7.2 Load patches 7.3 Patches per id per day 7.4 Calculate speed between patches 7.5 Check some individuals 7.6 Export this ‘good’ patch data", " Section 7 In development: Residence patch cleaning Residence patches must be cleaned to remove patches where the speed between patches is too high, or too low. We filter for \\(0 &lt; v &lt; 150\\), where \\(v\\) is the speed between patches. We also filter out patches that are too small, ie, fewer than 10 fixes (approx. 5 minutes). Once cleaned, these patches can be passed on to the overlap finding algorithm. 7.1 Prepare libraries library(data.table) library(purrr) library(ggplot2) library(colorspace) 7.2 Load patches # load data patches &lt;- fread(&quot;data/data_2018/data_2018_patch_summary.csv&quot;) # add uid patches[, uid := seq_len(nrow(patches))] 7.2.1 Examine for anomalies # histogram of durations (in s converted to mins) hist(patches$duration / (3600)) # hour of day patch_times &lt;- patches$time_mean # convert to posixct patch_times &lt;- as.POSIXct(patch_times, tz = &quot;Berlin&quot;, origin = &quot;1970-01-01&quot;) # hour day hour_day &lt;- hour(patch_times) hist(hour_day) # looks okay # get julian day julian_day &lt;- as.numeric(julian(patch_times, origin = &quot;2018-01-01&quot;)) hist(julian_day) # looks okay as there are more patches as more birds are tagged in september # check max times range(patch_times) # looks okay 7.3 Patches per id per day # add date patch_summary &lt;- copy(patches[, c(&quot;id&quot;, &quot;time_mean&quot;, &quot;tide_number&quot;)]) patch_summary[, day := round(as.numeric(julian( as.POSIXct(patch_times, tz = &quot;Berlin&quot;, origin = &quot;1970-01-01&quot; ), origin = &quot;2018-01-01&quot; )))] # count per tide and or day patch_count &lt;- patches[, .N, by = c(&quot;id&quot;, &quot;tide_number&quot;) ] ggplot(patch_count) + geom_tile(aes(tide_number, id, fill = N )) + scale_fill_continuous_sequential( palette = &quot;Sunset&quot; ) + coord_cartesian(expand = F) 7.4 Calculate speed between patches # this is the speed in metres per second patches[, c(&quot;speed_in&quot;, &quot;speed_out&quot;) := list( distBwPatch / (shift(time_start, type = &quot;lead&quot;) - shift(time_end)), shift(distBwPatch, type = &quot;lead&quot;) / (shift(time_end, type = &quot;lead&quot;) - shift(time_start)) ), by = .(id, tide_number) ] # histogram of speeds hist(patches$speed_in) range(patches$speed_in, na.rm = T) range(patches$speed_out, na.rm = T) # quantiles quantile(patches$speed_in, probs = seq(0.9, 1, 0.01), na.rm = T) quantile(patches$speed_out, probs = seq(0.9, 1, 0.01), na.rm = T) # what is 150 km/hr in m/s cutoff_speed &lt;- 15 # around 70 kmph # filter ridiculous speeds patches &lt;- patches[between(speed_in, 0, cutoff_speed) &amp; between(speed_out, 0, cutoff_speed), ] # goes from 90k to 78k 7.5 Check some individuals ggplot(patches) + geom_path(aes(x_mean, y_mean, group = interaction(id, tide_number) ), size = 0.1, alpha = 0.2 ) weird patches at y &lt; 5890000 must remove patches with single point area (314.0157), choose points above area 600 # above 600, which means at least two points patches &lt;- patches[area &gt; 600, ] # now 71k ggplot(patches) + geom_path(aes(x_mean, y_mean, group = interaction(id, tide_number) ), size = 0.1, alpha = 0.2 ) 7.6 Export this ‘good’ patch data # export the summary fwrite(patches, &quot;data/data_2018/data_2018_good_patches.csv&quot;) "],["bathymetry-of-the-griend-mudflats.html", "Section 8 Bathymetry of the Griend mudflats 8.1 Get data and plot basic trend 8.2 Plot as 3D maps", " Section 8 Bathymetry of the Griend mudflats 8.1 Get data and plot basic trend # load libs to read bathymetry library(raster) library(rayshader) library(sf) # data libs library(data.table) library(purrr) library(stringr) # plot libs library(ggplot2) library(ggthemes) # load bathymetry and subset data &lt;- raster(&quot;data/bathymetry_waddenSea_2015.tif&quot;) griend &lt;- st_read(&quot;data/griend_polygon/griend_polygon.shp&quot;) %&gt;% st_buffer(10.5e3) # assign utm 31 crs and subset crs(data) &lt;- st_crs(griend)$proj4string data &lt;- crop(data, as(griend, &quot;Spatial&quot;)) data &lt;- aggregate(data, fact = 2) # remove 20m outliers # data[data &gt; 500] &lt;- NA data_m &lt;- raster_to_matrix(data) # get quantiles of the matrix data_q &lt;- quantile(data_m, na.rm = T, probs = seq(1000) / 1000) # read in waterlevel data waterlevel &lt;- fread(&quot;data/data_2018/waterlevelWestTerschelling.csv&quot;, sep = &quot;;&quot;) # select useful columns and rename waterlevel &lt;- waterlevel[, .(WAARNEMINGDATUM, WAARNEMINGTIJD, NUMERIEKEWAARDE)] setnames(waterlevel, c(&quot;date&quot;, &quot;time&quot;, &quot;level&quot;)) # make a single POSIXct column of datetime waterlevel[, dateTime := as.POSIXct(paste(date, time, sep = &quot; &quot;), format = &quot;%d-%m-%Y %H:%M:%S&quot;, tz = &quot;CET&quot; )] waterlevel &lt;- setDT(distinct(setDF(waterlevel), dateTime, .keep_all = TRUE)) # plot waterlevel quantiles with data from west terschelling waterlimits &lt;- range(waterlevel$level) fig_waterlevel_area &lt;- ggplot() + geom_line(aes(x = 1:1000 / 1000, y = data_q)) + geom_hline(yintercept = waterlimits, col = &quot;blue&quot;, lty = 2) + geom_hline(yintercept = 0, lty = 2, col = &quot;red&quot;) + scale_x_continuous(labels = scales::percent) + theme_bw() + coord_flip(xlim = c(0.25, 1.01), ylim = c(-250, 250)) + labs(x = &quot;% area covered&quot;, y = &quot;waterlevel (cm over NAP)&quot;) ggsave(fig_waterlevel_area, filename = &quot;figs/fig_waterlevel_area.png&quot;, dpi = 300, height = 4, width = 6 ) 8.2 Plot as 3D maps NB: This section not currently working. We attempt to make an animation of the tidal cycle around Griend. # make sequence waterdepth &lt;- seq(waterlimits[1], waterlimits[2], length.out = 30) waterdepth &lt;- c(waterdepth, rev(waterdepth)) # make visualisation for (i in 1:length(waterdepth)) { data_m %&gt;% sphere_shade(texture = &quot;imhof1&quot;, zscale = 50) %&gt;% # add_water(detect_water(data_m, zscale = 100, # max_height = waterdepth[i],cutoff = 0.1), # color = &quot;desert&quot;) %&gt;% add_shadow(hillshade = data_m) %&gt;% plot_3d(data_m, zscale = 75, wateralpha = 0.6, solid = F, shadow = F, water = TRUE, waterdepth = waterdepth[i], watercolor = &quot;dodgerblue1&quot;, phi = 90, theta = 0, zoom = 0.75, windowsize = c(1000, 800), background = &quot;black&quot;, calculate_normals = F ) render_label(data_m, x = 500, y = 500, z = 500, text = glue::glue(&quot;waterdepth = {round(waterdepth[i])} cm&quot;), freetype = F, textcolor = &quot;black&quot; ) rgl::snapshot3d(paste0(&quot;figs/tide_rise/fig&quot;, str_pad(i, 2, pad = &quot;0&quot;), &quot;.png&quot;)) rgl::rgl.close() } library(magick) list.files(path = &quot;figs/tide_rise/&quot;, pattern = &quot;*.png&quot;, full.names = T) %&gt;% map(image_read) %&gt;% # reads each path file image_join() %&gt;% # joins image image_animate(fps = 2) %&gt;% # animates, can opt for number of loops image_write(&quot;figs/fig_tide_rise_anim.gif&quot;) # write to current dir if (knitr:::is_latex_output()) { } else { knitr::include_graphics(&quot;figs/fig_tide_rise_anim.gif&quot;) } "]]
